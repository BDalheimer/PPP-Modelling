aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 4.5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
demand3 <- data.frame(bezier(x+1.58, y+1.58, evaluation = 500))
# Helper function to identify approximate curve intersections by brute force
approxIntersection <- function(path1, path2){
distanceMatrix <- proxy::dist(path1, path2)
whichMin <- which(distanceMatrix == min(distanceMatrix), arr.ind = TRUE)
return((path1[whichMin[1], ]+path2[whichMin[2], ])/2)
}  # This is where a long bezier() output vector is useful
intersectS1D1 <- approxIntersection(supply1, demand1)
intersectS1D2 <- approxIntersection(supply1, demand3)
intersections <- data.frame(rbind(intersectS1D1, intersectS1D2))
textAnnotations <- data.frame(label = c("S", "D1", "D2"),
x = c(8, 1, 5),  # DF of line labels
y = c(8, 8, 8))
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 4.5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
demand3 <- data.frame(bezier(x+1.63, y+1.63, evaluation = 500))
# Helper function to identify approximate curve intersections by brute force
approxIntersection <- function(path1, path2){
distanceMatrix <- proxy::dist(path1, path2)
whichMin <- which(distanceMatrix == min(distanceMatrix), arr.ind = TRUE)
return((path1[whichMin[1], ]+path2[whichMin[2], ])/2)
}  # This is where a long bezier() output vector is useful
intersectS1D1 <- approxIntersection(supply1, demand1)
intersectS1D2 <- approxIntersection(supply1, demand3)
intersections <- data.frame(rbind(intersectS1D1, intersectS1D2))
textAnnotations <- data.frame(label = c("S", "D1", "D2"),
x = c(8, 1, 5),  # DF of line labels
y = c(8, 8, 8))
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 4.5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5.5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
print(zp1)
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
print(zp1)
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
zp1 <- zp1 + annotate("segment", x = 7, xend = 6, y = 3, yend = 3,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1
zp1 <- zp1 + annotate("segment", x = 9, xend = 8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1
zp1 <- zp1 + annotate("segment", x = 8.7, xend = 8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = gray(1/2))
zp1
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1 <- zp1 + annotate("segment", x = 8.7, xend = 8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = gray(1/2))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1
demand3 <- data.frame(bezier(x+1.58, y+1.58, evaluation = 500))
# Helper function to identify approximate curve intersections by brute force
approxIntersection <- function(path1, path2){
distanceMatrix <- proxy::dist(path1, path2)
whichMin <- which(distanceMatrix == min(distanceMatrix), arr.ind = TRUE)
return((path1[whichMin[1], ]+path2[whichMin[2], ])/2)
}  # This is where a long bezier() output vector is useful
intersectS1D1 <- approxIntersection(supply1, demand1)
intersectS1D2 <- approxIntersection(supply1, demand3)
intersections <- data.frame(rbind(intersectS1D1, intersectS1D2))
textAnnotations <- data.frame(label = c("S", "D1", "D2"),
x = c(8, 1, 5),  # DF of line labels
y = c(8, 8, 8))
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1 <- zp1 + annotate("segment", x = 8.7, xend = 8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = gray(1/2))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(3,"mm")), colour = gray(1/2))
zp1 <- zp1 + annotate("segment", x = 8.5, xend = 7.8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = gray(1/2))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = black(1/2))
arrow = arrow(length = unit(2,"mm")), colour = grey(1))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1))
zp1
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1 <- zp1 + annotate("segment", x = 8.5, xend = 7.8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
textAnnotations <- data.frame(label = c("S", "D1", "D2", "D3"),
x = c(8, 1, 5),  # DF of line labels
y = c(8, 8, 8))
textAnnotations <- data.frame(label = c("S", "D1", "D2", "D3"),
x = c(8, 1, 5, 3.5),  # DF of line labels
y = c(8, 8, 8, 8))
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1 <- zp1 + annotate("segment", x = 8.5, xend = 7.8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
textAnnotations <- data.frame(label = c("S", "D", "D'", "D''"),
x = c(8, 1, 5, 3.35),  # DF of line labels
y = c(8, 8, 8, 8))
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1 <- zp1 + annotate("segment", x = 8.5, xend = 7.8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("A rightward shift in the demand curve")  # Title
print(zp1)
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 6, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1
zp1 <- qplot(x = 0:10, y = 0:10, geom = "blank")  # Draw an empty plot
zp1 <- zp1 + geom_path(data = supply1, aes(x = x, y = y),  # Add supply curve
size = 1, colour = "BLUE")
zp1 <- zp1 + geom_path(data = demand1, aes(x = x, y = y),  # Add demand 1
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand2, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_path(data = demand3, aes(x = x, y = y),  # Add demand 2
size = 1, colour = "RED")
zp1 <- zp1 + geom_point(data = intersections,  # Add points at intersections
aes(x = x, y = y), size = 3)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = x, y = 0, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_segment(data = intersections,  # Add dotted lines
aes(x = 0, y = y, xend = x, yend = y),
lty = 2)
zp1 <- zp1 + geom_text(data = textAnnotations,  # Add curve labels
aes(x = x, y = y, label = label))
zp1 <- zp1 + annotate("segment", x = 2.5, xend = 5.9, y = 6, yend = 6,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1 <- zp1 + annotate("segment", x = 8.5, xend = 7.8, y = 4, yend = 4,  # Arrow
arrow = arrow(length = unit(2,"mm")), colour = grey(1/10))
zp1 <- zp1 + scale_x_continuous("Quantity", expand = c(0, 0),  # Clean up axis
breaks = intersections$x,
labels = expression(Q[1], Q[2]))
zp1 <- zp1 + scale_y_continuous("Price", expand = c(0, 0),  # Clean up axis
breaks = intersections$y,
labels = expression(P[1], P[2]))
zp1 <- zp1 + theme_classic()  # New in ggplot2 0.9.3. Time to update!
zp1 <- zp1 + coord_equal()  # Force fixed x-y relationship
zp1 <- zp1 + ggtitle("Grain Market Demand and Supply")  # Title
print(zp1)
countryListISO2C = c("GB", "US", "JP", "DE", "CN")
reerCPIData = as.data.table(WDI(indicator = c("PX.REX.REER", "FP.CPI.TOTL"),
country = countryListISO2C,
start = 1980,
end = 2013))
library(data.table)
library(WDI)
library(ggplot2)
countryListISO2C = c("GB", "US", "JP", "DE", "CN")
reerCPIData = as.data.table(WDI(indicator = c("PX.REX.REER", "FP.CPI.TOTL"),
country = countryListISO2C,
start = 1980,
end = 2013))
reerCPIData
packagesCran = c("data.table", "plm", "xtable", "scales", "CADFtest", "ggplot2")
if (length(setdiff(packagesCran, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packagesCran, rownames(installed.packages())))
}
lapply(packagesCran, require, character.only = T)
# Set working directory to location where data is saved as csv
setwd("/home/bernhard/Dropbox/University of Goettingen/Semester III/Applied Econometrics/Data")#Retrieve Annual World Bank data via API
# load IMF data on REER and prepare
reerIMF = as.data.table(read.csv("reerIMF.csv"))
setnames(reerIMF, "X", "Time")
colnames(reerIMF) = gsub("..", " ", colnames(reerIMF), fixed = T)
colnames(reerIMF) = gsub(".", " ", colnames(reerIMF), fixed = T)
## PLOT
#set proper time format
reerIMF[, Time := seq(as.Date("1980/1/1"), as.Date("2013/12/24"), "months")]
# convert to long data formar for usage in ggplot
reerIMFLong = melt(reerIMF, id.vars = 'Time', variable.name = "Country", value.name = "reer")
#plot the time series
ggplot(reerIMFLong, aes(x = Time, y = reer)) +
geom_line() +
ylab("Real Effective Exchange Rate") + xlab("Time")+
facet_wrap(~ Country, scales = 'free_y', ncol = 4)
## SINGLE COUNTRY UNIT ROOT TESTs
# perform ADF tests
adfTest = sapply(reerIMF[, -"Time", with = FALSE],
function(x) {CADFtest(x,
max.lag.y = 7,
criterion = "AIC",
type = "drift")})
# perform kpss test
kpssTest = sapply(reerIMF[, -"Time", with = FALSE], function(x) {kpss.test(x, lshort = F)})
# extract inference parameters
unitRootTestTable = data.table(Country = names(reerIMF[, -"Time", with = FALSE]),
ADFlag = adfTest["max.lag.y",],
ADF = adfTest["statistic",],
ADFpvalue = adfTest["p.value",],
kpss = kpssTest["statistic",],
kpssPvalue = kpssTest["p.value",]
)
# set keys accordingly
setkey(unitRootTestTable, Country)
# compile table to export to Latex
print(xtable(unitRootTestTable,
digits = c(0, 0, 0, 4, 4, 4, 2)),
include.rownames = FALSE)
## PANEL UNIT ROOT TESTS
panelUnitRootIPS = purtest(as.data.frame(reerIMF[, -"Time", with = FALSE]), pmax = 20, exo = "intercept", test = "ips")
panelUnitRootMW = purtest(as.data.frame(reerIMF[, -"Time", with = FALSE]), pmax = 20, exo = "intercept", test = "madwu")
#set up exportable data.table
panelUnitRootTests = data.table( test = c("IPS", "MW"),
Statistic = as.data.table(unlist(c(panelUnitRootIPS$statistic[1],
panelUnitRootMW$statistic[1]))),
pvalue = as.data.table(unlist(c(panelUnitRootIPS$statistic[6],
panelUnitRootMW$statistic[6])))
)
# Export to Latex
print(xtable(panelUnitRootTests,
digits = c(0,0,4,4),
include.rownames = FALSE))
reerIMF = as.data.table(read.csv("~/reerIMF.csv"))
citation("knitr")
citation("knitr")
library(knitr)
citation("knitr")
rm(list=ls())
R<-100         # number of iterations
T<-1000         # number of time periods
alpha<-c(1,0.9,0.99)         # possible values for alpha in y_t=alpha*y_t-1+e_t
### Part (i) ###
y1<-matrix(0,T,R)
y2<-matrix(0,T,R)
y3<-matrix(0,T,R)
citation9"knitr"
citation("knitr")
